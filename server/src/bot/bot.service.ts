import { Injectable, OnModuleInit } from '@nestjs/common';
import TelegramBot = require('node-telegram-bot-api');
import { PrismaService } from 'src/prisma.service';
import { Prisma, Users } from '@prisma/client';


import { commands } from './commands';


@Injectable()
export class BotService implements OnModuleInit {
  private bot: TelegramBot;

  constructor(private readonly prisma: PrismaService) {}

  async onModuleInit() {
    const bot = new TelegramBot(process.env.BOT_API_TOKEN, {
      polling: {
        interval: 1000,
        autoStart: true,
      },
    });


    await this.botCommands(bot, commands);
    await this.botMessage(bot);
    await this.botDeleteMessages(bot);
  }

  // –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
  async botMessage(options) {
    this.bot = options

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    try {
        this.bot.on('text', async (msg) => {
          const chatId = msg.chat.id;
          const firstName = msg.from.first_name;
          if(msg.text == '/start') {
  
            const msgWait= await this.bot.sendMessage(chatId, '–¢–µ–±–µ —Ç—É—Ç –Ω–µ —Ä–∞–¥—ã...');
  
            setTimeout( async () => {
              await this.bot.deleteMessage(msgWait.chat.id, msgWait.message_id);  
              await this.bot.sendMessage(chatId, '—à—É—á—É');          
            },3000);

            await this.bot.sendMessage(msg.chat.id, `–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞! üëãüèª`);

            if(msg.text.length > 6) {

              const refID = msg.text.slice(7);

              await this.bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);

          }

            setTimeout( async () => {
              await this.bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, ${firstName}! –Ø - –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ INSIDE360, —á–µ–º –º–æ–≥—É –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω?`);
            }, 4000)

            console.log(msg);
          
          }
          else if(msg.text == '/ref') {
            await this.bot.sendMessage(chatId, `${process.env.URL_TO_BOT}?start=${msg.from.id}`);         
          }
          else if(msg.text == '/help') {
            await this.bot.sendMessage(chatId, `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ HTML\n\n<b>–ñ–∏—Ä–Ω—ã–π –¢–µ–∫—Å—Ç</b>\n<i>–¢–µ–∫—Å—Ç –ö—É—Ä—Å–∏–≤–æ–º</i>\n<code>–¢–µ–∫—Å—Ç —Å –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º</code>\n<s>–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<pre language='c++'>–∫–æ–¥ –Ω–∞ c++</pre>\n<a href='t.me'>–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞</a>`, {

              parse_mode: "HTML"
      
          })
        }
        else if (msg.text === '/menu') {
          const chatId = msg.chat.id;
        
          await this.bot.sendMessage(chatId, '–ú–µ–Ω—é –±–æ—Ç–∞', {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚≠êÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞', callback_data: 'image' },
                  { text: '‚≠êÔ∏è –í–∏–¥–µ–æ', callback_data: 'video' },
                ],
                [
                  { text: '‚≠êÔ∏è –ê—É–¥–∏–æ', callback_data: 'audio' },
                  { text: '‚≠êÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: 'voice' },
                ],
                [
                  { text: '‚≠êÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç', callback_data: 'contact' },
                  { text: '‚≠êÔ∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', callback_data: 'location' },
                ],
                [
                  { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close' },
                ],
              ],
            },
          });
        }
        
          // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
          else if(msg.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é') {

            await this.bot.sendMessage(chatId, '–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ', {

                reply_markup: {
        
                    remove_keyboard: true
        
                }
        
            })
        
        }
          else {
            await this.bot.sendMessage(chatId, msg.text)
          }

        })

        
      } catch(error) {
        console.log(error);
      }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text; 

      // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      await this.bot.sendMessage(chatId, '–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ' + text);
    });


    this.bot.on('callback_query', async (query) => {
      const chatId = query.message.chat.id;
      const data = query.data;
    
      if (data === 'image') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É!');
      } else if (data === 'video') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ!');
      } else if (data === 'audio') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—É–¥–∏–æ!');
      } else if (data === 'voice') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!');
      } else if (data === 'contact') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç!');
      } else if (data === 'location') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        await this.bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!');
      } else if (data === 'close') {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        await this.bot.answerCallbackQuery(query.id, { text: '–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ!' });
      }
    });
    

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on("polling_error", (error) => console.log(error));



  }

  async botCommands(options, commands) {
    this.bot = options

    this.bot.setMyCommands(commands)
  }

  async botDeleteMessages(options) {
    this.bot = options
  
    this.bot.onText(/\/clear/, async (msg) => {
      const chatId = msg.chat.id;
      const messageId = msg.message_id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /clear
  
      try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /clear
        for (let i = messageId; i > 0; i--) {
          await this.bot.deleteMessage(chatId, i)
            .catch(err => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            });
        }
        await this.bot.sendMessage(chatId, '–ß–∞—Ç –æ—á–∏—â–µ–Ω!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞:', error);
      }
    });
  }
  
  }



  // method for adding new users in db
  // async addNewUser(data: Prisma.User): Promise<void> {
  //   await this.prisma.users.create({
  //     data
  //   })
  // }
}
